/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SPARK_STARTMANAGER {
        errorStrategy = 'terminate'
        ext.spark_local_dir = params.spark_local_dir ? params.spark_local_dir : ''
        ext.sleep_secs = 2
    }

    withName: SPARK_STARTWORKER {
        errorStrategy = 'terminate'
        ext.sleep_secs = 2
    }

    withName: SPARK_WAITFORMANAGER {
        errorStrategy = 'terminate'
        ext.sleep_secs = 2
        ext.max_wait_secs = 7200
    }

    withName: SPARK_WAITFORWORKER {
        errorStrategy = 'terminate'
        ext.sleep_secs = 2
        ext.max_wait_secs = 7200
    }

    withName: SPARK_TERMINATE {
        errorStrategy = 'terminate'
    }

    withName: STITCHING_PARSECZI {
        errorStrategy = 'terminate'
        ext.args = "-r \"${params.resolution}\" -a \"${params.axis_mapping}\""
    }

    withName: STITCHING_CZI2N5 {
        errorStrategy = 'terminate'
        ext.args = "--blockSize ${params.stitching_block_size}"
    }

    withName: STITCHING_FLATFIELD {
        errorStrategy = 'terminate'
        ext.args = "--2d --bins 256"
    }

    withName: STITCHING_STITCH {
        errorStrategy = 'terminate'
        ext.args = { "--mode ${params.stitching_mode} --padding ${params.stitching_padding} --blurSigma ${params.stitching_blur_sigma} ${stitching_channel()}" }
    }

    withName: STITCHING_FUSE {
        errorStrategy = 'terminate'
        ext.args = "--blending --fill --n5BlockSize ${params.final_block_size_xy}"
    }
}

// Returns the stitching channel parameter if one was selected, or an empty string
def stitching_channel()  {
    sc = params.stitching_channel
    // If stitching channel is not set or set to 'all', then use all channels for stitching.
    if (!sc || sc=='all')
        return ''
    // If the user provides the channel in the form "c1" or "ch1", we just want the number:
    def sc_num_lookup = (sc =~ /(\d+)/)
    if (sc_num_lookup.find()) {
        return "-r "+sc_num_lookup[0][1]
    } else {
        log.error "Invalid value for --stitching_channel: $sc"
        System.exit(1)
    }
}
