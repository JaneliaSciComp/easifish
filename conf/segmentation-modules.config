params {
    runtime_opts                  = ''

    segmentation_ids              = 't1'
    segmentation_ch               = 'c0'
    segmentation_scale            = 's2'


    local_fix_mask                   = ''
    local_fix_mask_subpath           = ''
    local_mov_mask                   = ''
    local_mov_mask_subpath           = ''

    segmentation_subdir              = 'segmentation'

    segmentation_container           = 'segmentation.n5'

    distributed_cellpose             = true
    cellpose_models_dir              = ''
    cellpose_log_config              = "${projectDir}/conf/cellpose_logging_config.ini"
    cellpose_dask_config             = "${projectDir}/conf/dask_config.yml"

    distributed_cellpose_blocksize   = '128,128,128'
    bigstream_local_overlap_factor   = 0

    cellpose_segmentation_cpus       = 1
    cellpose_segmentation_mem_gb     = 0

    cellpose_dask_workers            = 10
    cellpose_dask_min_workers        = 1
    cellpose_dask_worker_cpus        = 1
    cellpose_dask_worker_mem_gb      = 0

    cellpose_scheduler_port          = 0
    cellpose_dashboard_port          = 0
}

process {

    withName:"(.*:)?SEGMENTATION_.*" {
        errorStrategy = 'terminate'
        containerOptions = "${params.runtime_opts}"
        ext {
            container = 'ghcr.io/janeliascicomp/bigstream:1.3.2-dask2024.4.1-py11'
        }
    }

    withName:"(.*:)?DASK_STARTMANAGER" {
        containerOptions = params.runtime_opts
        ext {
            container = 'ghcr.io/janeliascicomp/bigstream:1.3.2-dask2024.4.1-py11'

            args = [
                "--port ${params.bigstream_scheduler_port}",
                "--dashboard-address ${params.bigstream_dashboard_port}",
            ].join(' ')
        }
    }

    withName:"(.*:)?DASK_STARTWORKER" {
        ext {
            container = 'ghcr.io/janeliascicomp/cellpose:3.1.0-dask2024.12.1-py11'

            args = [
                "--nthreads 1",
            ].join(' ')
        }
    }

    withName:"(.*:)?CELLPOSE" {
        time = 24.h
        ext {
            args = [
                optional_arg_value('--local-fix-mask-descriptor', params.fix_mask_descriptor),
                optional_arg_value('--local-mov-mask-descriptor', params.mov_mask_descriptor),

                optional_arg_value('--local-processing-size', params.bigstream_local_blocksize),
                optional_arg_value('--local-processing-overlap-factor', params.bigstream_local_overlap_factor),

                // parameters for generating the inverse transform
                optional_arg_value('--inv-iterations', params.bigstream_inv_iterations),
                optional_arg_value('--inv-order', params.bigstream_inv_order),
                optional_arg_value('--inv-sqrt-iterations', params.bigstream_inv_sqrt_iterations),

                optional_arg_value('--worker-cpus', params.local_align_worker_cpus),
                optional_arg_value('--cluster-max-tasks', params.bigstream_dask_cluster_max_tasks),
            ].join(' ')
        }
    }



}

def arg_value(arg_flag, arg_value) {
    "${arg_flag} ${arg_value}"
}

def bool_arg(arg_flag, arg_value) {
    arg_value ? "${arg_flag}" : ''
}

def optional_arg_value(arg_flag, arg_value) {
    arg_value ? "${arg_flag} ${arg_value}" : ''
}
