params {
    runtime_opts                      = ''

    segmentation_ids                  = 't1'
    segmentation_input                = ''
    segmentation_subpath              = ''
    seg_channels                      = 'c1'
    seg_scales                        = 's2'
    segmentation_subdir               = 'segmentation'
    segmentation_imgname              = 'segmentation.n5'

    skip_segmentation                 = false
    distributed_cellpose              = true
    cellpose_model                    = 'cyto3'
    cellpose_models_dir               = ''
    cellpose_log_config               = "${projectDir}/conf/cellpose_logging_config.ini"
    cellpose_dask_config              = "${projectDir}/conf/dask_config.yml"

    distributed_cellpose_blocksize    = '128,128,128'
    cellpose_blocks_overlap           = '30,30,30'
    cellpose_use_gpu                  = true
    cellpose_device                   = '0'

    cellpose_verbose                  = false
    cellpose_test                     = false
    cellpose_diameter                 = 30
    cellpose_eval_channels            = '0,0'
    cellpose_min_size                 = 5
    cellprob_threshold                = 1.0
    cellpose_iou_threshold            = 0.05
    cellpose_save_intermediate_labels = true
    cellpose_shrink_labels_to_merge   = false
    cellpose_merge_iou_depth          = 1
    
    cellpose_segmentation_cpus        = 1
    cellpose_segmentation_mem_gb      = 0

    cellpose_dask_workers             = 10
    cellpose_dask_min_workers         = 1
    cellpose_dask_worker_cpus         = 1
    cellpose_dask_worker_mem_gb       = 0

    max_cellpose_tasks                = 0

    cellpose_scheduler_port           = 0
    cellpose_dashboard_port           = 0
}

process {

    withName: "(.*):SEGMENTATION:(.*)" {
        errorStrategy = 'terminate'
        containerOptions = params.runtime_opts
        container = 'ghcr.io/janeliascicomp/cellpose:3.1.0-dask2024.12.1-py11'
    }

    withName: "(.*):SEGMENTATION:(.*)DASK_STARTMANAGER" {
        containerOptions = params.runtime_opts
        ext.args = [
            "--port ${params.cellpose_scheduler_port}",
            "--dashboard-address ${params.cellpose_dashboard_port}",
        ].join(' ')
    }

    withName: "(.*):SEGMENTATION:(.*)DASK_STARTWORKER" {
        ext.args = [
            "--nthreads 1",
        ].join(' ')
    }

    withName: "(.*):SEGMENTATION:(.*)CELLPOSE" {
        time = 24.h
        ext.args = [
            optional_arg_value('--process-blocksize', params.distributed_cellpose_blocksize),
            optional_arg_value('--max-cellpose-tasks', params.max_cellpose_tasks),
            optional_arg_value('--model', params.cellpose_model),
            optional_arg_value('--cellprob_threshold', params.cellprob_threshold),
            optional_arg_value('--diam_mean', params.cellpose_diameter),
            optional_arg_value('--blocks-overlaps', params.cellpose_blocks_overlap),
            optional_arg_value('--eval-channels', params.cellpose_eval_channels),
            optional_arg_value('--min_size', params.cellpose_min_size),
            optional_arg_value('--device', params.cellpose_device),
            optional_arg_value('--iou-threshold', params.cellpose_iou_threshold),
            optional_arg_value('--iou-depth', params.cellpose_merge_iou_depth),

            bool_arg('--use_gpu', params.cellpose_use_gpu),

            bool_arg('--save-intermediate-labels', params.cellpose_save_intermediate_labels),
            bool_arg('--shrink-labels-to-merge', params.cellpose_shrink_labels_to_merge),

            optional_arg_value('--worker-cpus', params.cellpose_dask_worker_cpus),

            bool_arg('--test-mode', params.cellpose_test),

            bool_arg('--verbose', params.cellpose_verbose),
        ].join(' ')
    }

}

def arg_value(arg_flag, arg_value) {
    "${arg_flag} ${arg_value}"
}

def bool_arg(arg_flag, arg_value) {
    arg_value ? "${arg_flag}" : ''
}

def optional_arg_value(arg_flag, arg_value) {
    arg_value ? "${arg_flag} ${arg_value}" : ''
}
