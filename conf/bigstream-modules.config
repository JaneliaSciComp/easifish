params {
    runtime_opts                     = ''
    dask_scheduler_port_binding      = ''

    registration_fix_id              = ''
    reg_ch                           = 'c1'
    global_scale                     = 's3'
    local_scale                      = 's2'
    fix_global_subpath               = ''
    mov_global_subpath               = ''
    fix_local_subpath                = ''
    mov_local_subpath                = ''
    registration_result_container    = 'registration.n5'
    global_steps                     = 'affine'
    local_steps                      = 'affine,deform'
    with_dask_cluster                = true
    bigstream_config                 = "${projectDir}/conf/bigstream_config.yml"
    dask_config                      = "${projectDir}/conf/dask_config.yml"
    deform_subpath                   = ''
    warped_subpaths                  = ''
    warped_channels                  = ''
    warped_scales                    = 's0'

    fix_mask_descriptor              = ''
    mov_mask_descriptor              = ''

    reuse_global_affine              = true

    bigstream_local_blocksize        = ''
    bigstream_local_overlap_factor   = 0

    bigstream_inv_iterations         = 5
    bigstream_inv_order              = 2
    bigstream_inv_sqrt_iterations    = 5

    bigstream_dask_cluster_max_tasks = 0

    global_align_cpus                = 3
    global_align_mem_gb              = 0
    local_align_cpus                 = 1
    local_align_mem_gb               = 0
    local_align_workers              = 10
    local_align_min_workers          = 1
    local_align_worker_cpus          = 1
    local_align_worker_mem_gb        = 0
}

process {

    withName:"(.*:)?BIGSTREAM_.*" {
        errorStrategy = 'terminate'
        ext.container = 'ghcr.io/janeliascicomp/bigstream:1.3.1-dask2024.4.1-py11'
        containerOptions = "${params.runtime_opts}"
    }

    withName:"(.*:)?BIGSTREAM_.*:DASK_STARTMANAGER" {
        containerOptions = "${params.runtime_opts} ${params.dask_scheduler_port_binding}"
    }

    withName:"(.*:)?BIGSTREAM_.*:DASK_STARTWORKER" {
        ext {
            args = [
                "--nthreads 1",
            ].join(' ')
        }
    }

    withName:".*:BIGSTREAM_GLOBALALIGN" {
        ext {
            args = [
                bool_arg('--reuse-existing-transform', params.reuse_global_affine),
                optional_arg_value('--global-fix-mask-descriptor', params.fix_mask_descriptor),
                optional_arg_value('--global-mov-mask-descriptor', params.mov_mask_descriptor),
            ].join(' ')
        }
    }

    withName:".*:BIGSTREAM_LOCALALIGN" {
        ext {
            args = [
                optional_arg_value('--local-fix-mask-descriptor', params.fix_mask_descriptor),
                optional_arg_value('--local-mov-mask-descriptor', params.mov_mask_descriptor),


                optional_arg_value('--local-processing-size', params.bigstream_local_blocksize),
                optional_arg_value('--local-processing-overlap-factor', params.bigstream_local_overlap_factor),

                // parameters for generating the inverse transform
                optional_arg_value('--inv-iterations', params.bigstream_inv_iterations),
                optional_arg_value('--inv-order', params.bigstream_inv_order),
                optional_arg_value('--inv-sqrt-iterations', params.bigstream_inv_sqrt_iterations),

                optional_arg_value('--cluster-max-tasks', params.bigstream_dask_cluster_max_tasks),
            ].join(' ')
        }
    }

    withName:".*:BIGSTREAM_DEFORM" {
        ext {
            args = [
                optional_arg_value('--output-blocksize', params.bigstream_local_blocksize),
            ].join(' ')
        }
    }

}

def arg_value(arg_flag, arg_value) {
    "${arg_flag} ${arg_value}"
}

def bool_arg(arg_flag, arg_value) {
    arg_value ? "${arg_flag}" : ''
}

def optional_arg_value(arg_flag, arg_value) {
    arg_value ? "${arg_flag} ${arg_value}" : ''
}
