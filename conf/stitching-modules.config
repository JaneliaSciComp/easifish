params {
    stitching_channel             = 'all'
    skip_stitching                = false
    resolution                    = '0.23,0.23,0.42'
    axis_mapping                  = '-x,y,z'
    stitching_block_size          = '128,128,64'
    final_block_size_xy           = 512
    stitching_mode                = 'incremental'
    stitching_padding             = '0,0,0'
    stitching_blur_sigma          = 2
    stitching_dir                 = ''
    stitching_result_dir          = ''
    stitching_result_container    = 'stitched.n5'
    flatfield_correction          = false
    darkfieldfile                 = ''
    flatfieldfile                 = ''
    spark_local_dir               = null
    spark_cluster                 = true
    spark_workers                 = 10
    min_spark_workers             = 5
    spark_worker_cores            = 1
    spark_gb_per_core             = 15
    spark_driver_cores            = 1
    spark_driver_mem_gb           = 12
}

process {

    withName: "(.*)?STITCHING:.*" {
        // all processes that run as part of the stitching workflow
        // use this container
        container = 'ghcr.io/janeliascicomp/stitching-spark:1.11.0-rc2'
        errorStrategy = 'terminate'
    }

    withName: "(.*)?STITCHING:(.*)SPARK_STARTMANAGER" {
        errorStrategy = 'terminate'
        ext.spark_local_dir = params.spark_local_dir ? params.spark_local_dir : ''
        ext.sleep_secs = 2
    }

    withName: "(.*)?STITCHING:(.*):SPARK_STARTWORKER" {
        errorStrategy = 'terminate'
        ext.sleep_secs = 2
    }

    withName: "(.*)?STITCHING:(.*):SPARK_WAITFORMANAGER" {
        errorStrategy = 'terminate'
        ext.sleep_secs = 2
        ext.max_wait_secs = 7200
    }

    withName: "(.*)?STITCHING:(.*):SPARK_WAITFORWORKER" {
        errorStrategy = 'terminate'
        ext.sleep_secs = 2
        ext.max_wait_secs = 7200
    }

    withName: "(.*)?STITCHING_PARSECZI" {
        errorStrategy = 'terminate'
        ext.args = "-r \"${params.resolution}\" -a \"${params.axis_mapping}\""
    }

    withName: "(.*)?STITCHING_CZI2N5" {
        errorStrategy = 'terminate'
        ext.args = "--blockSize ${params.stitching_block_size}"
    }

    withName: "(.*)?STITCHING_FLATFIELD" {
        errorStrategy = 'terminate'
        ext.args = "--2d --bins 256"
    }

    withName: "(.*)?STITCHING_STITCH" {
        time = 8.h
        errorStrategy = 'terminate'
        ext.args = "--mode ${params.stitching_mode} --padding ${params.stitching_padding} --blurSigma ${params.stitching_blur_sigma} ${stitching_channel()}"
    }

    withName: "(.*)?STITCHING_FUSE" {
        time = 8.h
        errorStrategy = 'terminate'
        ext.args = "--blending --fill --n5BlockSize ${params.final_block_size_xy}"
    }
}

// Returns the stitching channel parameter if one was selected, or an empty string
def stitching_channel()  {
    def sc = params.stitching_channel
    // If stitching channel is not set or set to 'all', then use all channels for stitching.
    if (!sc || sc=='all')
        return ''
    // If the user provides the channel in the form "c1" or "ch1", we just want the number:
    def sc_num_lookup = (sc =~ /(\d+)/)
    if (sc_num_lookup.find()) {
        return "-r "+sc_num_lookup[0][1]
    } else {
        log.error "Invalid value for --stitching_channel: $sc"
        System.exit(1)
    }
}
